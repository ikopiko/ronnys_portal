{"remainingRequest":"D:\\ronnys_portal\\node_modules\\babel-loader\\lib\\index.js!D:\\ronnys_portal\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\ronnys_portal\\src\\helpers\\fake-backend.js","dependencies":[{"path":"D:\\ronnys_portal\\src\\helpers\\fake-backend.js","mtime":1641798484000},{"path":"D:\\ronnys_portal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\ronnys_portal\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\ronnys_portal\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICJEOi9yb25ueXNfcG9ydGFsL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuZW5kcy13aXRoLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcubWF0Y2guanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3BsaXQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWx0ZXIuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMiOwppbXBvcnQgYXhpb3MgZnJvbSAiYXhpb3MiOyAvLyBhcnJheSBpbiBsb2NhbCBzdG9yYWdlIGZvciByZWdpc3RlcmVkIHVzZXJzCgp2YXIgdXNlcnMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VycycpKSB8fCBbewogIHVzZXJuYW1lOiAiYWRtaW4iLAogIGVtYWlsOiAiYWRtaW5AdGhlbWVzYnJhbmQuY29tIiwKICBwYXNzd29yZDogIjEyMzQ1NiIKfV07CmV4cG9ydCBmdW5jdGlvbiBjb25maWd1cmVGYWtlQmFja2VuZCgpIHsKICB2YXIgcmVhbEZldGNoID0gd2luZG93LmZldGNoOwoKICB3aW5kb3cuZmV0Y2ggPSBmdW5jdGlvbiAodXJsLCBvcHRzKSB7CiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAvLyB3cmFwIGluIHRpbWVvdXQgdG8gc2ltdWxhdGUgc2VydmVyIGFwaSBjYWxsCiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgIC8vIGF1dGhlbnRpY2F0ZQogICAgICAgIGlmICh1cmwuZW5kc1dpdGgoJy91c2Vycy9hdXRoZW50aWNhdGUnKSAmJiBvcHRzLm1ldGhvZCA9PT0gJ1BPU1QnKSB7CiAgICAgICAgICAvLyBnZXQgcGFyYW1ldGVycyBmcm9tIHBvc3QgcmVxdWVzdAogICAgICAgICAgdmFyIHBhcmFtcyA9IEpTT04ucGFyc2Uob3B0cy5ib2R5KTsKICAgICAgICAgIGF4aW9zLnBvc3QoImh0dHBzOi8vYXBpLnJvbm55cy5pbmZvL3Jlc3Qvd2ViL2luZGV4LnBocD9yPWF1dGgiLCB7CiAgICAgICAgICAgIHVzZXJuYW1lOiBwYXJhbXMuZW1haWwsCiAgICAgICAgICAgIHBhc3N3b3JkOiBwYXJhbXMucGFzc3dvcmQKICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICAgICAgICB2YXIgdXNlciA9IHJlcy5kYXRhLmRhdGE7IC8vIGhhbmRsZSBzdWNjZXNzCgogICAgICAgICAgICB2YXIgcmVzcG9uc2VKc29uID0gdXNlcjsKCiAgICAgICAgICAgIGlmICghcmVzLmRhdGEuaXNfZXJyb3IpIHsKICAgICAgICAgICAgICByZXNvbHZlKHsKICAgICAgICAgICAgICAgIG9rOiB0cnVlLAogICAgICAgICAgICAgICAgdGV4dDogZnVuY3Rpb24gdGV4dCgpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShKU09OLnN0cmluZ2lmeShyZXNwb25zZUpzb24pKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICByZWplY3QoIlRoZXNlIGNyZWRlbnRpYWxzIGRvIG5vdCBtYXRjaCBvdXIgcmVjb3Jkcy4iKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKCkgewogICAgICAgICAgICAvL2NvbnNvbGUubG9nKGVycm9yKQogICAgICAgICAgICByZWplY3QoIlRoZXNlIGNyZWRlbnRpYWxzIGRvIG5vdCBtYXRjaCBvdXIgcmVjb3Jkcy4iKTsKICAgICAgICAgIH0pOwogICAgICAgICAgcmV0dXJuOyAvLyAvLyBmaW5kIGlmIGFueSB1c2VyIG1hdGNoZXMgbG9naW4gY3JlZGVudGlhbHMKICAgICAgICAgIC8vIGxldCBmaWx0ZXJlZFVzZXJzID0gdXNlcnMuZmlsdGVyKHVzZXIgPT4gewogICAgICAgICAgLy8gICAgIHJldHVybiB1c2VyLmVtYWlsID09PSBwYXJhbXMuZW1haWwgJiYgdXNlci5wYXNzd29yZCA9PT0gcGFyYW1zLnBhc3N3b3JkOwogICAgICAgICAgLy8gfSk7CiAgICAgICAgICAvLyBpZiAoZmlsdGVyZWRVc2Vycy5sZW5ndGgpIHsKICAgICAgICAgIC8vICAgICAvLyBpZiBsb2dpbiBkZXRhaWxzIGFyZSB2YWxpZCByZXR1cm4gdXNlciBkZXRhaWxzIGFuZCBmYWtlIGp3dCB0b2tlbgogICAgICAgICAgLy8gICAgIGxldCB1c2VyID0gZmlsdGVyZWRVc2Vyc1swXTsKICAgICAgICAgIC8vICAgICBsZXQgcmVzcG9uc2VKc29uID0gewogICAgICAgICAgLy8gICAgICAgICBpZDogdXNlci5pZCwKICAgICAgICAgIC8vICAgICAgICAgdXNlcm5hbWU6IHVzZXIudXNlcm5hbWUsCiAgICAgICAgICAvLyAgICAgICAgIG5hbWU6IHVzZXIubmFtZSwKICAgICAgICAgIC8vICAgICAgICAgZW1haWw6IHVzZXIuZW1haWwsCiAgICAgICAgICAvLyAgICAgICAgIHRva2VuOiAnZmFrZS1qd3QtdG9rZW4nCiAgICAgICAgICAvLyAgICAgfTsKICAgICAgICAgIC8vICAgICByZXNvbHZlKHsgb2s6IHRydWUsIHRleHQ6ICgpID0+IFByb21pc2UucmVzb2x2ZShKU09OLnN0cmluZ2lmeShyZXNwb25zZUpzb24pKSB9KTsKICAgICAgICAgIC8vIH0gZWxzZSB7CiAgICAgICAgICAvLyAgICAgLy8gZWxzZSByZXR1cm4gZXJyb3IKICAgICAgICAgIC8vICAgICByZWplY3QoJ1RoZXNlIGNyZWRlbnRpYWxzIGRvIG5vdCBtYXRjaCBvdXIgcmVjb3Jkcy4nKTsKICAgICAgICAgIC8vIH0KICAgICAgICAgIC8vIHJldHVybjsKICAgICAgICB9IC8vIGdldCB1c2VycwoKCiAgICAgICAgaWYgKHVybC5lbmRzV2l0aCgnL3VzZXJzJykgJiYgb3B0cy5tZXRob2QgPT09ICdHRVQnKSB7CiAgICAgICAgICAvLyBjaGVjayBmb3IgZmFrZSBhdXRoIHRva2VuIGluIGhlYWRlciBhbmQgcmV0dXJuIHVzZXJzIGlmIHZhbGlkLCB0aGlzIHNlY3VyaXR5IGlzIGltcGxlbWVudGVkIHNlcnZlciBzaWRlIGluIGEgcmVhbCBhcHBsaWNhdGlvbgogICAgICAgICAgaWYgKG9wdHMuaGVhZGVycyAmJiBvcHRzLmhlYWRlcnMuQXV0aG9yaXphdGlvbiA9PT0gJ0JlYXJlciBmYWtlLWp3dC10b2tlbicpIHsKICAgICAgICAgICAgcmVzb2x2ZSh7CiAgICAgICAgICAgICAgb2s6IHRydWUsCiAgICAgICAgICAgICAgdGV4dDogZnVuY3Rpb24gdGV4dCgpIHsKICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoSlNPTi5zdHJpbmdpZnkodXNlcnMpKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gcmV0dXJuIDQwMSBub3QgYXV0aG9yaXNlZCBpZiB0b2tlbiBpcyBudWxsIG9yIGludmFsaWQKICAgICAgICAgICAgcmVqZWN0KCdVbmF1dGhvcmlzZWQnKTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm47CiAgICAgICAgfSAvLyBnZXQgdXNlciBieSBpZAoKCiAgICAgICAgaWYgKHVybC5tYXRjaCgvXC91c2Vyc1wvXGQrJC8pICYmIG9wdHMubWV0aG9kID09PSAnR0VUJykgewogICAgICAgICAgLy8gY2hlY2sgZm9yIGZha2UgYXV0aCB0b2tlbiBpbiBoZWFkZXIgYW5kIHJldHVybiB1c2VyIGlmIHZhbGlkLCB0aGlzIHNlY3VyaXR5IGlzIGltcGxlbWVudGVkIHNlcnZlciBzaWRlIGluIGEgcmVhbCBhcHBsaWNhdGlvbgogICAgICAgICAgaWYgKG9wdHMuaGVhZGVycyAmJiBvcHRzLmhlYWRlcnMuQXV0aG9yaXphdGlvbiA9PT0gJ0JlYXJlciBmYWtlLWp3dC10b2tlbicpIHsKICAgICAgICAgICAgLy8gZmluZCB1c2VyIGJ5IGlkIGluIHVzZXJzIGFycmF5CiAgICAgICAgICAgIHZhciB1cmxQYXJ0cyA9IHVybC5zcGxpdCgnLycpOwogICAgICAgICAgICB2YXIgaWQgPSBwYXJzZUludCh1cmxQYXJ0c1t1cmxQYXJ0cy5sZW5ndGggLSAxXSk7CiAgICAgICAgICAgIHZhciBtYXRjaGVkVXNlcnMgPSB1c2Vycy5maWx0ZXIoZnVuY3Rpb24gKHVzZXIpIHsKICAgICAgICAgICAgICByZXR1cm4gdXNlci5pZCA9PT0gaWQ7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICB2YXIgdXNlciA9IG1hdGNoZWRVc2Vycy5sZW5ndGggPyBtYXRjaGVkVXNlcnNbMF0gOiBudWxsOyAvLyByZXNwb25kIDIwMCBPSyB3aXRoIHVzZXIKCiAgICAgICAgICAgIHJlc29sdmUoewogICAgICAgICAgICAgIG9rOiB0cnVlLAogICAgICAgICAgICAgIHRleHQ6IGZ1bmN0aW9uIHRleHQoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodXNlcik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIHJldHVybiA0MDEgbm90IGF1dGhvcmlzZWQgaWYgdG9rZW4gaXMgbnVsbCBvciBpbnZhbGlkCiAgICAgICAgICAgIHJlamVjdCgnVW5hdXRob3Jpc2VkJyk7CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0gLy8gcmVnaXN0ZXIgdXNlcgoKCiAgICAgICAgaWYgKHVybC5lbmRzV2l0aCgnL3VzZXJzL3JlZ2lzdGVyJykgJiYgb3B0cy5tZXRob2QgPT09ICdQT1NUJykgewogICAgICAgICAgLy8gZ2V0IG5ldyB1c2VyIG9iamVjdCBmcm9tIHBvc3QgYm9keQogICAgICAgICAgdmFyIG5ld1VzZXIgPSBKU09OLnBhcnNlKG9wdHMuYm9keSk7IC8vIHZhbGlkYXRpb24KCiAgICAgICAgICB2YXIgZHVwbGljYXRlVXNlciA9IHVzZXJzLmZpbHRlcihmdW5jdGlvbiAodXNlcikgewogICAgICAgICAgICByZXR1cm4gdXNlci51c2VybmFtZSA9PT0gbmV3VXNlci51c2VybmFtZTsKICAgICAgICAgIH0pLmxlbmd0aDsKCiAgICAgICAgICBpZiAoZHVwbGljYXRlVXNlcikgewogICAgICAgICAgICByZWplY3QoIlVzZXJuYW1lICciICsgbmV3VXNlci51c2VybmFtZSArICInIGlzIGFscmVhZHkgdGFrZW4iKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfSAvLyBzYXZlIG5ldyB1c2VyCgoKICAgICAgICAgIG5ld1VzZXIuaWQgPSB1c2Vycy5sZW5ndGggPyBNYXRoLm1heC5hcHBseShNYXRoLCBfdG9Db25zdW1hYmxlQXJyYXkodXNlcnMubWFwKGZ1bmN0aW9uICh1c2VyKSB7CiAgICAgICAgICAgIHJldHVybiB1c2VyLmlkOwogICAgICAgICAgfSkpKSArIDEgOiAxOwogICAgICAgICAgdXNlcnMucHVzaChuZXdVc2VyKTsKICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd1c2VycycsIEpTT04uc3RyaW5naWZ5KHVzZXJzKSk7IC8vIHJlc3BvbmQgMjAwIE9LCgogICAgICAgICAgcmVzb2x2ZSh7CiAgICAgICAgICAgIG9rOiB0cnVlLAogICAgICAgICAgICB0ZXh0OiBmdW5jdGlvbiB0ZXh0KCkgewogICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfSAvLyBwYXNzIHRocm91Z2ggYW55IHJlcXVlc3RzIG5vdCBoYW5kbGVkIGFib3ZlCgoKICAgICAgICByZWFsRmV0Y2godXJsLCBvcHRzKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgcmV0dXJuIHJlc29sdmUocmVzcG9uc2UpOwogICAgICAgIH0pOwogICAgICB9LCA1MDApOwogICAgfSk7CiAgfTsKfQ=="},{"version":3,"sources":["D:/ronnys_portal/src/helpers/fake-backend.js"],"names":["axios","users","JSON","parse","localStorage","getItem","username","email","password","configureFakeBackend","realFetch","window","fetch","url","opts","Promise","resolve","reject","setTimeout","endsWith","method","params","body","post","then","res","user","data","responseJson","is_error","ok","text","stringify","catch","headers","Authorization","match","urlParts","split","id","parseInt","length","matchedUsers","filter","newUser","duplicateUser","Math","max","map","push","setItem","response"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,IAAIC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,KACL,CAAC;AAAEC,EAAAA,QAAQ,EAAE,OAAZ;AAAqBC,EAAAA,KAAK,EAAE,uBAA5B;AAAqDC,EAAAA,QAAQ,EAAE;AAA/D,CAAD,CADP;AAGA,OAAO,SAASC,oBAAT,GAAgC;AAEnC,MAAIC,SAAS,GAAGC,MAAM,CAACC,KAAvB;;AACAD,EAAAA,MAAM,CAACC,KAAP,GAAe,UAAUC,GAAV,EAAeC,IAAf,EAAqB;AAEhC,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC;AACAC,MAAAA,UAAU,CAAC,YAAM;AAEb;AACA,YAAIL,GAAG,CAACM,QAAJ,CAAa,qBAAb,KAAuCL,IAAI,CAACM,MAAL,KAAgB,MAA3D,EAAmE;AAC/D;AACA,cAAIC,MAAM,GAAGnB,IAAI,CAACC,KAAL,CAAWW,IAAI,CAACQ,IAAhB,CAAb;AAEAtB,UAAAA,KAAK,CACJuB,IADD,CACM,mDADN,EAC2D;AACzDjB,YAAAA,QAAQ,EAAEe,MAAM,CAACd,KADwC;AAEzDC,YAAAA,QAAQ,EAAEa,MAAM,CAACb;AAFwC,WAD3D,EAKCgB,IALD,CAKM,UAACC,GAAD,EAAS;AACX,gBAAIC,IAAI,GAAGD,GAAG,CAACE,IAAJ,CAASA,IAApB,CADW,CAGX;;AACA,gBAAMC,YAAY,GAAGF,IAArB;;AACA,gBAAG,CAACD,GAAG,CAACE,IAAJ,CAASE,QAAb,EAAsB;AAClBb,cAAAA,OAAO,CAAC;AAAEc,gBAAAA,EAAE,EAAE,IAAN;AAAYC,gBAAAA,IAAI,EAAE;AAAA,yBAAMhB,OAAO,CAACC,OAAR,CAAgBd,IAAI,CAAC8B,SAAL,CAAeJ,YAAf,CAAhB,CAAN;AAAA;AAAlB,eAAD,CAAP;AACH,aAFD,MAGK;AACDX,cAAAA,MAAM,CAAC,6CAAD,CAAN;AACH;AAEJ,WAjBD,EAiBGgB,KAjBH,CAiBS,YAAY;AACjB;AACEhB,YAAAA,MAAM,CAAC,6CAAD,CAAN;AACL,WApBD;AAuBA,iBA3B+D,CA6B/D;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACH,SAtDY,CAwDb;;;AACA,YAAIJ,GAAG,CAACM,QAAJ,CAAa,QAAb,KAA0BL,IAAI,CAACM,MAAL,KAAgB,KAA9C,EAAqD;AACjD;AACA,cAAIN,IAAI,CAACoB,OAAL,IAAgBpB,IAAI,CAACoB,OAAL,CAAaC,aAAb,KAA+B,uBAAnD,EAA4E;AACxEnB,YAAAA,OAAO,CAAC;AAAEc,cAAAA,EAAE,EAAE,IAAN;AAAYC,cAAAA,IAAI,EAAE;AAAA,uBAAMhB,OAAO,CAACC,OAAR,CAAgBd,IAAI,CAAC8B,SAAL,CAAe/B,KAAf,CAAhB,CAAN;AAAA;AAAlB,aAAD,CAAP;AACH,WAFD,MAEO;AACH;AACAgB,YAAAA,MAAM,CAAC,cAAD,CAAN;AACH;;AAED;AACH,SAnEY,CAqEb;;;AACA,YAAIJ,GAAG,CAACuB,KAAJ,CAAU,eAAV,KAA8BtB,IAAI,CAACM,MAAL,KAAgB,KAAlD,EAAyD;AACrD;AACA,cAAIN,IAAI,CAACoB,OAAL,IAAgBpB,IAAI,CAACoB,OAAL,CAAaC,aAAb,KAA+B,uBAAnD,EAA4E;AACxE;AACA,gBAAIE,QAAQ,GAAGxB,GAAG,CAACyB,KAAJ,CAAU,GAAV,CAAf;AACA,gBAAIC,EAAE,GAAGC,QAAQ,CAACH,QAAQ,CAACA,QAAQ,CAACI,MAAT,GAAkB,CAAnB,CAAT,CAAjB;AACA,gBAAIC,YAAY,GAAGzC,KAAK,CAAC0C,MAAN,CAAa,UAAAjB,IAAI,EAAI;AAAE,qBAAOA,IAAI,CAACa,EAAL,KAAYA,EAAnB;AAAwB,aAA/C,CAAnB;AACA,gBAAIb,IAAI,GAAGgB,YAAY,CAACD,MAAb,GAAsBC,YAAY,CAAC,CAAD,CAAlC,GAAwC,IAAnD,CALwE,CAOxE;;AACA1B,YAAAA,OAAO,CAAC;AAAEc,cAAAA,EAAE,EAAE,IAAN;AAAYC,cAAAA,IAAI,EAAE;AAAA,uBAAM7B,IAAI,CAAC8B,SAAL,CAAeN,IAAf,CAAN;AAAA;AAAlB,aAAD,CAAP;AACH,WATD,MASO;AACH;AACAT,YAAAA,MAAM,CAAC,cAAD,CAAN;AACH;;AAED;AACH,SAvFY,CAyFb;;;AACA,YAAIJ,GAAG,CAACM,QAAJ,CAAa,iBAAb,KAAmCL,IAAI,CAACM,MAAL,KAAgB,MAAvD,EAA+D;AAC3D;AACA,cAAIwB,OAAO,GAAG1C,IAAI,CAACC,KAAL,CAAWW,IAAI,CAACQ,IAAhB,CAAd,CAF2D,CAG3D;;AACA,cAAIuB,aAAa,GAAG5C,KAAK,CAAC0C,MAAN,CAAa,UAAAjB,IAAI,EAAI;AAAE,mBAAOA,IAAI,CAACpB,QAAL,KAAkBsC,OAAO,CAACtC,QAAjC;AAA4C,WAAnE,EAAqEmC,MAAzF;;AACA,cAAII,aAAJ,EAAmB;AACf5B,YAAAA,MAAM,CAAC,eAAe2B,OAAO,CAACtC,QAAvB,GAAkC,oBAAnC,CAAN;AACA;AACH,WAR0D,CAU3D;;;AACAsC,UAAAA,OAAO,CAACL,EAAR,GAAatC,KAAK,CAACwC,MAAN,GAAeK,IAAI,CAACC,GAAL,OAAAD,IAAI,qBAAQ7C,KAAK,CAAC+C,GAAN,CAAU,UAAAtB,IAAI;AAAA,mBAAIA,IAAI,CAACa,EAAT;AAAA,WAAd,CAAR,EAAJ,GAA0C,CAAzD,GAA6D,CAA1E;AACAtC,UAAAA,KAAK,CAACgD,IAAN,CAAWL,OAAX;AACAxC,UAAAA,YAAY,CAAC8C,OAAb,CAAqB,OAArB,EAA8BhD,IAAI,CAAC8B,SAAL,CAAe/B,KAAf,CAA9B,EAb2D,CAe3D;;AACAe,UAAAA,OAAO,CAAC;AAAEc,YAAAA,EAAE,EAAE,IAAN;AAAYC,YAAAA,IAAI,EAAE;AAAA,qBAAMhB,OAAO,CAACC,OAAR,EAAN;AAAA;AAAlB,WAAD,CAAP;AAEA;AACH,SA7GY,CA+Gb;;;AACAN,QAAAA,SAAS,CAACG,GAAD,EAAMC,IAAN,CAAT,CAAqBU,IAArB,CAA0B,UAAA2B,QAAQ;AAAA,iBAAInC,OAAO,CAACmC,QAAD,CAAX;AAAA,SAAlC;AAEH,OAlHS,EAkHP,GAlHO,CAAV;AAmHH,KArHM,CAAP;AAsHH,GAxHD;AAyHH","sourcesContent":["import axios from \"axios\";\r\n// array in local storage for registered users\r\nlet users = JSON.parse(localStorage.getItem('users'))\r\n    || [{ username: \"admin\", email: \"admin@themesbrand.com\", password: \"123456\" }];\r\n\r\nexport function configureFakeBackend() {\r\n\r\n    let realFetch = window.fetch;\r\n    window.fetch = function (url, opts) {\r\n\r\n        return new Promise((resolve, reject) => {\r\n            // wrap in timeout to simulate server api call\r\n            setTimeout(() => {\r\n\r\n                // authenticate\r\n                if (url.endsWith('/users/authenticate') && opts.method === 'POST') {\r\n                    // get parameters from post request\r\n                    let params = JSON.parse(opts.body);\r\n\r\n                    axios\r\n                    .post(\"https://api.ronnys.info/rest/web/index.php?r=auth\", {\r\n                      username: params.email,\r\n                      password: params.password,\r\n                    })\r\n                    .then((res) => {\r\n                        let user = res.data.data;\r\n                      \r\n                        // handle success\r\n                        const responseJson = user;\r\n                        if(!res.data.is_error){\r\n                            resolve({ ok: true, text: () => Promise.resolve(JSON.stringify(responseJson)) });\r\n                        }\r\n                        else {\r\n                            reject(\"These credentials do not match our records.\")    \r\n                        }\r\n                      \r\n                    }).catch(function () {\r\n                        //console.log(error)\r\n                          reject(\"These credentials do not match our records.\")  \r\n                    })\r\n\r\n\r\n                    return;\r\n\r\n                    // // find if any user matches login credentials\r\n                    // let filteredUsers = users.filter(user => {\r\n                    //     return user.email === params.email && user.password === params.password;\r\n                    // });\r\n\r\n                    // if (filteredUsers.length) {\r\n                    //     // if login details are valid return user details and fake jwt token\r\n                    //     let user = filteredUsers[0];\r\n                    //     let responseJson = {\r\n                    //         id: user.id,\r\n                    //         username: user.username,\r\n                    //         name: user.name,\r\n                    //         email: user.email,\r\n                    //         token: 'fake-jwt-token'\r\n                    //     };\r\n                    //     resolve({ ok: true, text: () => Promise.resolve(JSON.stringify(responseJson)) });\r\n                    // } else {\r\n                    //     // else return error\r\n                    //     reject('These credentials do not match our records.');\r\n                    // }\r\n\r\n                    // return;\r\n                }\r\n\r\n                // get users\r\n                if (url.endsWith('/users') && opts.method === 'GET') {\r\n                    // check for fake auth token in header and return users if valid, this security is implemented server side in a real application\r\n                    if (opts.headers && opts.headers.Authorization === 'Bearer fake-jwt-token') {\r\n                        resolve({ ok: true, text: () => Promise.resolve(JSON.stringify(users)) });\r\n                    } else {\r\n                        // return 401 not authorised if token is null or invalid\r\n                        reject('Unauthorised');\r\n                    }\r\n\r\n                    return;\r\n                }\r\n\r\n                // get user by id\r\n                if (url.match(/\\/users\\/\\d+$/) && opts.method === 'GET') {\r\n                    // check for fake auth token in header and return user if valid, this security is implemented server side in a real application\r\n                    if (opts.headers && opts.headers.Authorization === 'Bearer fake-jwt-token') {\r\n                        // find user by id in users array\r\n                        let urlParts = url.split('/');\r\n                        let id = parseInt(urlParts[urlParts.length - 1]);\r\n                        let matchedUsers = users.filter(user => { return user.id === id; });\r\n                        let user = matchedUsers.length ? matchedUsers[0] : null;\r\n\r\n                        // respond 200 OK with user\r\n                        resolve({ ok: true, text: () => JSON.stringify(user) });\r\n                    } else {\r\n                        // return 401 not authorised if token is null or invalid\r\n                        reject('Unauthorised');\r\n                    }\r\n\r\n                    return;\r\n                }\r\n\r\n                // register user\r\n                if (url.endsWith('/users/register') && opts.method === 'POST') {\r\n                    // get new user object from post body\r\n                    let newUser = JSON.parse(opts.body);\r\n                    // validation\r\n                    let duplicateUser = users.filter(user => { return user.username === newUser.username; }).length;\r\n                    if (duplicateUser) {\r\n                        reject(\"Username '\" + newUser.username + \"' is already taken\");\r\n                        return;\r\n                    }\r\n\r\n                    // save new user\r\n                    newUser.id = users.length ? Math.max(...users.map(user => user.id)) + 1 : 1;\r\n                    users.push(newUser);\r\n                    localStorage.setItem('users', JSON.stringify(users));\r\n\r\n                    // respond 200 OK\r\n                    resolve({ ok: true, text: () => Promise.resolve() });\r\n\r\n                    return;\r\n                }\r\n\r\n                // pass through any requests not handled above\r\n                realFetch(url, opts).then(response => resolve(response));\r\n\r\n            }, 500);\r\n        });\r\n    }\r\n}"]}]}